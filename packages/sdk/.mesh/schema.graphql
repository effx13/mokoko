schema {
  query: Query
  mutation: Mutation
}

directive @enum(value: String) on ENUM_VALUE

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "Armories", endpoint: "https://developer-lostark.game.onstove.com", operationHeaders: "{\"Authorization\":\"{context.headers.authorization}\"}") {
  "Returns search options for the market."
  Markets_GetOptions: MarketOption @httpOperation(path: "/markets/options", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a market item by ID."
  Markets_GetStats(
    "The ID of the item"
    itemId: BigInt!
  ): [MarketItemStats] @httpOperation(path: "/markets/items/{args.itemId}", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a list of events on progress."
  News_GetEvent: [Event] @httpOperation(path: "/news/events", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a list of guild rankings by a server."
  Guilds_GetGuild(serverName: queryInput_Guilds_GetGuild_serverName!): [GuildRanking] @httpOperation(path: "/guilds/rankings", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET, queryParamArgMap: "{\"serverName\":\"serverName\"}")
  "Returns search options for the auction house."
  Auctions_GetOptions: AuctionOption @httpOperation(path: "/auctions/options", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns all active auctions with search options."
  Auctions_GetItems(input: RequestAuctionItems_Input!): Auction @httpOperation(path: "/auctions/items", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST)
  "Returns all character profiles for an account."
  Characters_GetCharacters(
    "The name of the character"
    characterName: String!
  ): [CharacterInfo] @httpOperation(path: "/characters/{args.characterName}/siblings", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the basic stats by a character name."
  Armories_GetProfileInfo(
    "The name of the character"
    characterName: String!
  ): ArmoryProfile @httpOperation(path: "/armories/characters/{args.characterName}/profiles", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the items equipped by a character name."
  Armories_GetEquipment(
    "The name of the character"
    characterName: String!
  ): [ArmoryEquipment] @httpOperation(path: "/armories/characters/{args.characterName}/equipment", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the avatars equipped by a character name."
  Armories_GetAvatars(
    "The name of the character"
    characterName: String!
  ): [ArmoryAvatar] @httpOperation(path: "/armories/characters/{args.characterName}/avatars", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the combat skills by a character name."
  Armories_GetSkills(
    "The name of the character"
    characterName: String!
  ): [ArmorySkill] @httpOperation(path: "/armories/characters/{args.characterName}/combat-skills", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the engravings equipped by a character name."
  Armories_GetEngrave(
    "The name of the character"
    characterName: String!
  ): ArmoryEngraving @httpOperation(path: "/armories/characters/{args.characterName}/engravings", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the cards equipped by a character name."
  Armories_GetCard(
    "The name of the character"
    characterName: String!
  ): ArmoryCard @httpOperation(path: "/armories/characters/{args.characterName}/cards", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the gems equipped by a character name."
  Armories_GetGem(
    "The name of the character"
    characterName: String!
  ): ArmoryGem @httpOperation(path: "/armories/characters/{args.characterName}/gems", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the proving grounds by a character name."
  Armories_GetColosseumInfo(
    "The name of the character"
    characterName: String!
  ): ColosseumInfo @httpOperation(path: "/armories/characters/{args.characterName}/colosseums", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
  "Returns a summary of the collectibles by a character name."
  Armories_GetCollections(
    "The name of the character"
    characterName: String!
  ): [Collectible] @httpOperation(path: "/armories/characters/{args.characterName}/collectibles", operationSpecificHeaders: "{\"Content-Type\":\"\",\"Accept\":\"application/json\"}", httpMethod: GET)
}

type Mutation {
  "Returns all active market items with search options."
  Markets_GetItems(input: RequestMarketItems_Input!): MarketList @httpOperation(path: "/markets/items", operationSpecificHeaders: "{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}", httpMethod: POST)
}

type MarketOption {
  Categories: [Category]
  ItemGrades: [String]
  ItemTiers: [Int]
  Classes: [String]
}

type Category {
  Subs: [CategoryItem]
  Code: Int
  CodeName: String
}

type CategoryItem {
  Code: Int
  CodeName: String
}

type MarketItemStats {
  Name: String
  TradeRemainCount: Int
  BundleCount: Int
  Stats: [MarketStatsInfo]
}

type MarketStatsInfo {
  Date: String
  AvgPrice: Float
  TradeCount: Int
}

"The `BigInt` scalar type represents non-fractional signed whole numeric values."
scalar BigInt

type MarketList {
  PageNo: Int
  PageSize: Int
  TotalCount: Int
  Items: [MarketItem]
}

type MarketItem {
  Id: BigInt
  Name: String
  Grade: String
  Icon: String
  BundleCount: Int
  TradeRemainCount: Int
  YDayAvgPrice: Float
  RecentPrice: Int
  CurrentMinPrice: Int
}

"The search options for the market"
input RequestMarketItems_Input {
  Sort: mutationInput_Markets_GetItems_input_Sort
  CategoryCode: Int
  CharacterClass: String
  ItemTier: Int
  ItemGrade: String
  ItemName: String
  PageNo: Int
  SortCondition: mutationInput_Markets_GetItems_input_SortCondition
}

enum mutationInput_Markets_GetItems_input_Sort {
  GRADE
  YDAY_AVG_PRICE
  RECENT_PRICE
  CURRENT_MIN_PRICE
}

enum mutationInput_Markets_GetItems_input_SortCondition {
  ASC
  DESC
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

type Event {
  Title: String
  Thumbnail: String
  Link: String
  StartDate: DateTime
  EndDate: DateTime
  RewardDate: DateTime
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

type GuildRanking {
  Rank: Int
  GuildName: String
  GuildMessage: String
  MasterName: String
  Rating: Int
  MemberCount: Int
  MaxMemberCount: Int
  UpdatedDate: DateTime
}

"The name of the server"
enum queryInput_Guilds_GetGuild_serverName {
  _47336__54168__50728_ @enum(value: "\"루페온\"")
  _49892__47532__50504_ @enum(value: "\"실리안\"")
  _50500__47564_ @enum(value: "\"아만\"")
  _52852__47560__51064_ @enum(value: "\"카마인\"")
  _52852__51228__47196__49828_ @enum(value: "\"카제로스\"")
  _50500__48652__47120__49800__46300_ @enum(value: "\"아브렐슈드\"")
  _52852__45800_ @enum(value: "\"카단\"")
  _45768__45208__48652_ @enum(value: "\"니나브\"")
}

type AuctionOption {
  MaxItemLevel: Int
  ItemGradeQualities: [Int]
  SkillOptions: [SkillOption]
  EtcOptions: [EtcOption]
  Categories: [Category]
  ItemGrades: [String]
  ItemTiers: [Int]
  Classes: [String]
}

type SkillOption {
  Value: Int
  Class: String
  Text: String
  IsSkillGroup: Boolean
  Tripods: [Tripod]
}

type Tripod {
  Value: Int
  Text: String
  IsGem: Boolean
}

type EtcOption {
  Value: Int
  Text: String
  EtcSubs: [EtcSub]
}

type EtcSub {
  Value: Int
  Text: String
  Class: String
}

type Auction {
  PageNo: Int
  PageSize: Int
  TotalCount: BigInt
  Items: [AuctionItem]
}

type AuctionItem {
  Name: String
  Grade: String
  Tier: Int
  Level: Int
  Icon: String
  GradeQuality: Int
  AuctionInfo: AuctionInfo
  Options: [ItemOption]
}

type AuctionInfo {
  StartPrice: BigInt
  BuyPrice: BigInt
  BidPrice: BigInt
  EndDate: DateTime
  BidCount: Int
  BidStartPrice: BigInt
  IsCompetitive: Boolean
  TradeAllowCount: Int
}

type ItemOption {
  Type: query_Auctions_GetItems_Items_items_Options_items_Type
  OptionName: String
  OptionNameTripod: String
  Value: Int
  IsPenalty: Boolean
  ClassName: String
}

enum query_Auctions_GetItems_Items_items_Options_items_Type {
  None
  SKILL
  STAT
  ABILITY_ENGRAVE
  BRACELET_SPECIAL_EFFECTS
  GEM_SKILL_COOLDOWN_REDUCTION
  GEM_SKILL_COOLDOWN_REDUCTION_IDENTITY
  GEM_SKILL_DAMAGE
  GEM_SKILL_DAMAGE_IDENTITY
  BRACELET_RANDOM_SLOT
}

"The search options for the auction house"
input RequestAuctionItems_Input {
  ItemLevelMin: Int
  ItemLevelMax: Int
  ItemGradeQuality: Int
  SkillOptions: [SearchDetailOption_Input]
  EtcOptions: [SearchDetailOption_Input]
  Sort: queryInput_Auctions_GetItems_input_Sort
  CategoryCode: Int
  CharacterClass: String
  ItemTier: Int
  ItemGrade: String
  ItemName: String
  PageNo: Int
  SortCondition: queryInput_Auctions_GetItems_input_SortCondition
}

input SearchDetailOption_Input {
  FirstOption: Int
  SecondOption: Int
  MinValue: Int
  MaxValue: Int
}

enum queryInput_Auctions_GetItems_input_Sort {
  BIDSTART_PRICE
  BUY_PRICE
  EXPIREDATE
  ITEM_GRADE
  ITEM_LEVEL
  ITEM_QUALITY
}

enum queryInput_Auctions_GetItems_input_SortCondition {
  ASC
  DESC
}

type CharacterInfo {
  ServerName: String
  CharacterName: String
  CharacterLevel: Int
  CharacterClassName: String
  ItemAvgLevel: String
  ItemMaxLevel: String
}

type ArmoryProfile {
  CharacterImage: String
  ExpeditionLevel: Int
  PvpGradeName: String
  TownLevel: Int
  TownName: String
  Title: String
  GuildMemberGrade: String
  GuildName: String
  Stats: [Stat]
  Tendencies: [Tendency]
  ServerName: String
  CharacterName: String
  CharacterLevel: Int
  CharacterClassName: String
  ItemAvgLevel: String
  ItemMaxLevel: String
}

type Stat {
  Type: String
  Value: String
  Tooltip: [String]
}

type Tendency {
  Type: String
  Point: Int
  MaxPoint: Int
}

type ArmoryEquipment {
  Type: String
  Name: String
  Icon: String
  Grade: String
  Tooltip: String
}

type ArmoryAvatar {
  Type: String
  Name: String
  Icon: String
  Grade: String
  IsSet: Boolean
  IsInner: Boolean
  Tooltip: String
}

type ArmorySkill {
  Name: String
  Icon: String
  Level: Int
  Type: String
  IsAwakening: Boolean
  Tripods: [SkillTripod]
  Rune: SkillRune
  Tooltip: String
}

type SkillTripod {
  Tier: Int
  Slot: Int
  Name: String
  Icon: String
  Level: Int
  IsSelected: Boolean
  Tooltip: String
}

type SkillRune {
  Name: String
  Icon: String
  Grade: String
  Tooltip: String
}

type ArmoryEngraving {
  Engravings: [Engraving]
  Effects: [Effect]
}

type Engraving {
  Slot: Int
  Name: String
  Icon: String
  Tooltip: String
}

type Effect {
  Name: String
  Description: String
}

type ArmoryCard {
  Cards: [Card]
  Effects: [CardEffect]
}

type Card {
  Slot: Int
  Name: String
  Icon: String
  AwakeCount: Int
  AwakeTotal: Int
  Grade: String
  Tooltip: String
}

type CardEffect {
  Index: Int
  CardSlots: [Int]
  Items: [Effect]
}

type ArmoryGem {
  Gems: [Gem]
  Effects: [GemEffect]
}

type Gem {
  Slot: Int
  Name: String
  Icon: String
  Level: Int
  Grade: String
  Tooltip: String
}

type GemEffect {
  GemSlot: Int
  Name: String
  Description: String
  Icon: String
  Tooltip: String
}

type ColosseumInfo {
  Rank: Int
  PreRank: Int
  Exp: BigInt
  Colosseums: [Colosseum]
}

type Colosseum {
  SeasonName: String
  Competitive: AggregationTeamDeathMatchRank
  TeamDeathmatch: Aggregation
  Deathmatch: Aggregation
  TeamElimination: AggregationElimination
  CoOpBattle: Aggregation
}

type AggregationTeamDeathMatchRank {
  Rank: Int
  RankName: String
  RankIcon: String
  RankLastMmr: Int
  PlayCount: Int
  VictoryCount: Int
  LoseCount: Int
  TieCount: Int
  KillCount: Int
  AceCount: Int
  DeathCount: Int
}

type Aggregation {
  PlayCount: Int
  VictoryCount: Int
  LoseCount: Int
  TieCount: Int
  KillCount: Int
  AceCount: Int
  DeathCount: Int
}

type AggregationElimination {
  FirstWinCount: Int
  SecondWinCount: Int
  ThirdWinCount: Int
  FirstPlayCount: Int
  SecondPlayCount: Int
  ThirdPlayCount: Int
  AllKillCount: Int
  PlayCount: Int
  VictoryCount: Int
  LoseCount: Int
  TieCount: Int
  KillCount: Int
  AceCount: Int
  DeathCount: Int
}

type Collectible {
  Type: String
  Icon: String
  Point: Int
  MaxPoint: Int
  CollectiblePoints: [CollectiblePoint]
}

type CollectiblePoint {
  PointName: String
  Point: Int
  MaxPoint: Int
}